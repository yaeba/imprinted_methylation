#!/usr/bin/env python3
## Script to load methylation data generated by nanopolish call_methylation
## and make it into a dataframe with columns [chr, pos, log_lik_ratio, meth_measure, read_id]
## Usage: python nanopolish_extract_methylation.py /path/methylation.tsv \
## out_prefix <include_read_id>

import sys
import os
import numpy as np
import pandas as pd
import csv
import re
import itertools

os.environ['R_HOME']='/stornext/System/data/apps/R/R-3.5.1/lib64/R'
import rpy2
from rpy2 import robjects
from rpy2.robjects import pandas2ri
pandas2ri.activate()


def write_rdata(data, varname):
    r_data = pandas2ri.py2ri(data)
    robjects.r.assign(varname, r_data)
    robjects.r("save({}, file='{}')".format(varname, varname+".RData"))

infile = sys.argv[1]
out_prefix = sys.argv[2]
include_read_id = True if len(sys.argv) > 3 else False

print("Reading in methylation data")
# read in methylation data
with open(infile, "r") as handle:
    reader = csv.DictReader(handle, dialect='excel-tab')

    print("Gathering statistics from all blocks")

    # iterate and gather all statistics for all call group
    lst = []
    
    for row in reader:
        chrm = row['chromosome']
        read_id = row['read_name'][:36]
        llr = float(row['log_lik_ratio'])
        meth_measure = round(1 / (1 + 1/np.exp(llr)), 3)
        start = int(row['start']) + 1

        # multiple CpG in a call group
        starts = start + np.array([m.start(0) for m in re.finditer("CG", row['sequence'])])
        if include_read_id:
            lst.extend(list(zip(itertools.repeat(chrm), starts, itertools.repeat(llr), 
                                itertools.repeat(meth_measure), itertools.repeat(read_id))))
        else:
            lst.extend(list(zip(itertools.repeat(chrm), starts, itertools.repeat(llr),
                                itertools.repeat(meth_measure))))

print("Storing to dataframe")

# create a dataframe
if not include_read_id:
    df = pd.DataFrame(lst, columns=['chr', 'pos', 'log_lik_ratio', 'meth_measure'])
else:
    df = pd.DataFrame(lst, columns=['chr', 'pos', 'log_lik_ratio', 'meth_measure', 'read_id'])

df = df.sort_values(['chr', 'pos'])
df['pos'] = df['pos'].astype(int)
df = df.reset_index(drop=True)

# save the dataframe in RData format
print("Saving to RData")
write_rdata(df, out_prefix)
